// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  slug          String        @unique
  description   String
  price         Float
  images        Image[]
  collections   Collection[]  @relation("ProductCollection")
  orderItems    OrderItem[]
  cartItems     CartItem[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Collection {
  id        Int           @id @default(autoincrement())
  name      String
  slug      String        @unique
  products  Product[]     @relation("ProductCollection")
}

model User {
 id         Int         @id @default(autoincrement())
 email      String      @unique
 password   String
 cart       Cart?       
 cartId     Int?
 orders     Order[]
 createdAt  DateTime    @default(now())
 updatedAt  DateTime    @updatedAt
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  products  CartItem[]
  user      User        @relation(fields: [userId], references: [id])
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cart      Cart      @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int       @default(1)

  @@unique([cartId, productId]) // Composite unique constraint
}

model Order {
  id        Int       @id @default(autoincrement())
  userId    Int
  products  OrderItem[]
  total     Float
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}